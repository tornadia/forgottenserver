/**
 * The Forgotten Server - a free and open-source MMORPG server emulator
 * Copyright (C) 2019  Mark Samman <mark.samman@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#ifndef FS_CONST_H_0A49B5996F074465BF44B90F4F780E8B
#define FS_CONST_H_0A49B5996F074465BF44B90F4F780E8B

static constexpr int32_t NETWORKMESSAGE_MAXSIZE = 24590;

enum MagicEffectClasses : uint8_t {
	CONST_ME_NONE,

	CONST_ME_DRAWBLOOD = 1,
	CONST_ME_LOSEENERGY = 2,
	CONST_ME_POFF = 3,
	CONST_ME_BLOCKHIT = 4,
	CONST_ME_EXPLOSIONAREA = 5,
	CONST_ME_EXPLOSIONHIT = 6,
	CONST_ME_FIREAREA = 7,
	CONST_ME_YELLOW_RINGS = 8,
	CONST_ME_GREEN_RINGS = 9,
	CONST_ME_HITAREA = 10,
	CONST_ME_TELEPORT = 11,
	CONST_ME_ENERGYHIT = 12,
	CONST_ME_MAGIC_BLUE = 13,
	CONST_ME_MAGIC_RED = 14,
	CONST_ME_MAGIC_GREEN = 15,
	CONST_ME_HITBYFIRE = 16,
	CONST_ME_HITBYPOISON = 17,
	CONST_ME_MORTAREA = 18,
	CONST_ME_SOUND_GREEN = 19,
	CONST_ME_SOUND_RED = 20,
	CONST_ME_POISONAREA = 21,
	CONST_ME_SOUND_YELLOW = 22,
	CONST_ME_SOUND_PURPLE = 23,
	CONST_ME_SOUND_BLUE = 24,
	CONST_ME_SOUND_WHITE = 25,
	CONST_ME_BUBBLES = 26,
	CONST_ME_CRAPS = 27,
	CONST_ME_GIFT_WRAPS = 28,
	CONST_ME_FIREWORK_YELLOW = 29,
	CONST_ME_FIREWORK_RED = 30,
	CONST_ME_FIREWORK_BLUE = 31,
	CONST_ME_STUN = 32,
	CONST_ME_SLEEP = 33,
	CONST_ME_WATERCREATURE = 34,
	CONST_ME_GROUNDSHAKER = 35,
	CONST_ME_HEARTS = 36,
	CONST_ME_FIREATTACK = 37,
	CONST_ME_ENERGYAREA = 38,
	CONST_ME_SMALLCLOUDS = 39,
	CONST_ME_HOLYDAMAGE = 40,
	CONST_ME_BIGCLOUDS = 41,
	CONST_ME_ICEAREA = 42,
	CONST_ME_ICETORNADO = 43,
	CONST_ME_ICEATTACK = 44,
	CONST_ME_STONES = 45,
	CONST_ME_SMALLPLANTS = 46,
	CONST_ME_CARNIPHILA = 47,
	CONST_ME_PURPLEENERGY = 48,
	CONST_ME_YELLOWENERGY = 49,
	CONST_ME_HOLYAREA = 50,
	CONST_ME_BIGPLANTS = 51,
	CONST_ME_CAKE = 52,
	CONST_ME_GIANTICE = 53,
	CONST_ME_WATERSPLASH = 54,
	CONST_ME_PLANTATTACK = 55,
	CONST_ME_TUTORIALARROW = 56,
	CONST_ME_TUTORIALSQUARE = 57,
	CONST_ME_MIRRORHORIZONTAL = 58,
	CONST_ME_MIRRORVERTICAL = 59,
	CONST_ME_SKULLHORIZONTAL = 60,
	CONST_ME_SKULLVERTICAL = 61,
	CONST_ME_ASSASSIN = 62,
	CONST_ME_STEPSHORIZONTAL = 63,
	CONST_ME_BLOODYSTEPS = 64,
	CONST_ME_STEPSVERTICAL = 65,
	CONST_ME_YALAHARIGHOST = 66,
	CONST_ME_BATS = 67,
	CONST_ME_SMOKE = 68,
	CONST_ME_INSECTS = 69,
	CONST_ME_DRAGONHEAD = 70
};

enum ShootType_t : uint8_t {
	CONST_ANI_NONE,

	CONST_ANI_SPEAR = 1,
	CONST_ANI_BOLT = 2,
	CONST_ANI_ARROW = 3,
	CONST_ANI_FIRE = 4,
	CONST_ANI_ENERGY = 5,
	CONST_ANI_POISONARROW = 6,
	CONST_ANI_BURSTARROW = 7,
	CONST_ANI_THROWINGSTAR = 8,
	CONST_ANI_THROWINGKNIFE = 9,
	CONST_ANI_SMALLSTONE = 10,
	CONST_ANI_DEATH = 11,
	CONST_ANI_LARGEROCK = 12,
	CONST_ANI_SNOWBALL = 13,
	CONST_ANI_POWERBOLT = 14,
	CONST_ANI_POISON = 15,
	CONST_ANI_INFERNALBOLT = 16,
	CONST_ANI_HUNTINGSPEAR = 17,
	CONST_ANI_ENCHANTEDSPEAR = 18,
	CONST_ANI_REDSTAR = 19,
	CONST_ANI_GREENSTAR = 20,
	CONST_ANI_ROYALSPEAR = 21,
	CONST_ANI_SNIPERARROW = 22,
	CONST_ANI_ONYXARROW = 23,
	CONST_ANI_PIERCINGBOLT = 24,
	CONST_ANI_WHIRLWINDSWORD = 25,
	CONST_ANI_WHIRLWINDAXE = 26,
	CONST_ANI_WHIRLWINDCLUB = 27,
	CONST_ANI_ETHEREALSPEAR = 28,
	CONST_ANI_ICE = 29,
	CONST_ANI_EARTH = 30,
	CONST_ANI_HOLY = 31,
	CONST_ANI_SUDDENDEATH = 32,
	CONST_ANI_FLASHARROW = 33,
	CONST_ANI_FLAMMINGARROW = 34,
	CONST_ANI_SHIVERARROW = 35,
	CONST_ANI_ENERGYBALL = 36,
	CONST_ANI_SMALLICE = 37,
	CONST_ANI_SMALLHOLY = 38,
	CONST_ANI_SMALLEARTH = 39,
	CONST_ANI_EARTHARROW = 40,
	CONST_ANI_EXPLOSION = 41,

	// for internal use, don't send to client
	CONST_ANI_WEAPONTYPE = 0xFE, // 254
};

enum SpellGroups_t {
	SPELLGROUP_NONE = 0x00,
	SPELLGROUP_MELEE = 0x01,
	SPELLGROUP_HEALING = 0x02,
	SPELLGROUP_SUPPORT = 0x03,
	SPELLGROUP_SPECIAL = 0x04
};

enum Spells_t {
	SPELL_NONE                    = 0x00,
	SPELL_LIGHT_HEALING           = 0x01,
	SPELL_INTENSE_HEALING         = 0x02,
	SPELL_ULTIMATE_HEALING        = 0x03,
	SPELL_INTENSE_HEALING_RUNE    = 0x04,
	SPELL_ULTIMATE_HEALING_RUNE   = 0x05,
	SPELL_HASTE                   = 0x06,
	SPELL_LIGHT_MAGIC_MISSILE     = 0x07,
	SPELL_HEAVY_MAGIC_MISSILE     = 0x08,
	SPELL_SUMMON_CREATURE         = 0x09,
	SPELL_LIGHT                   = 0x0A,
	SPELL_GREAT_LIGHT             = 0x0B,
	SPELL_CONVINCE_CREATURE       = 0x0C,
	SPELL_ENERGY_WAVE             = 0x0D,
	SPELL_CHAMELEON               = 0x0E,
	SPELL_FIREBALL                = 0x0F,
	SPELL_GREAT_FIREBALL          = 0x10,
	SPELL_FIREBOMB                = 0x11,
	SPELL_EXPLOSION               = 0x12,
	SPELL_FIRE_WAVE               = 0x13,
	SPELL_FIND_PERSON             = 0x14,
	SPELL_SUDDEN_DEATH            = 0x15,
	SPELL_ENERGY_BEAM             = 0x16,
	SPELL_GREAT_ENERGY_BEAM       = 0x17,
	SPELL_HELLS_CORE              = 0x18,
	SPELL_FIRE_FIELD              = 0x19,
	SPELL_POISON_FIELD            = 0x1A,
	SPELL_ENERGY_FIELD            = 0x1B,
	SPELL_FIRE_WALL               = 0x1C,
	SPELL_CURE_POISON             = 0x1D,
	SPELL_DESTROY_FIELD           = 0x1E,
	SPELL_ANTIDOTE_RUNE           = 0x1F,
	SPELL_POISON_WALL             = 0x20,
	SPELL_ENERGY_WALL             = 0x21,
	SPELL_UNKNOWN_1               = 0x22,
	SPELL_UNKNOWN_2               = 0x23,
	SPELL_SALVATION               = 0x24,
	SPELL_MOVE                    = 0x25,
	SPELL_CREATURE_ILLUSION       = 0x26,
	SPELL_STRONG_HASTE            = 0x27,
	SPELL_UNKNOWN_3               = 0x28,
	SPELL_UNKNOWN_4               = 0x29,
	SPELL_FOOD                    = 0x2A,
	SPELL_STRONG_ICE_WAVE         = 0x2B,
	SPELL_MAGIC_SHIELD            = 0x2C,
	SPELL_INVISIBLE               = 0x2D,
	SPELL_UNKNOWN_5               = 0x2E,
	SPELL_UNKNOWN_6               = 0x2F,
	SPELL_POISONED_ARROW          = 0x30,
	SPELL_EXPLOSIVE_ARROW         = 0x31,
	SPELL_SOULFIRE                = 0x32,
	SPELL_CONJURE_ARROW           = 0x33,
	SPELL_RETRIEVE_FRIEND         = 0x34,
	SPELL_UNKNOWN_7               = 0x35,
	SPELL_PARALYZE                = 0x36,
	SPELL_ENERGYBOMB              = 0x37,
	SPELL_WRATH_OF_NATURE         = 0x38,
	SPELL_STRONG_ETHEREAL_SPEAR   = 0x39,
	SPELL_UNKNOWN_8               = 0x3A,
	SPELL_FRONT_SWEEP             = 0x3B,
	SPELL_UNKNOWN_9               = 0x3C,
	SPELL_BRUTAL_STRIKE           = 0x3D,
	SPELL_ANNIHILATION            = 0x3E,
	SPELL_UNKNOWN_10              = 0x3F,
	SPELL_UNKNOWN_11              = 0x40,
	SPELL_UNKNOWN_12              = 0x41,
	SPELL_UNKNOWN_13              = 0x42,
	SPELL_UNKNOWN_14              = 0x43,
	SPELL_UNKNOWN_15              = 0x44,
	SPELL_UNKNOWN_16              = 0x45,
	SPELL_UNKNOWN_17              = 0x46,
	SPELL_INVITE_GUESTS           = 0x47,
	SPELL_INVITE_SUBOWNERS        = 0x48,
	SPELL_KICK_GUEST              = 0x49,
	SPELL_EDIT_DOOR               = 0x4A,
	SPELL_ULTIMATE_LIGHT          = 0x4B,
	SPELL_MAGIC_ROPE              = 0x4C,
	SPELL_STALAGMITE              = 0x4D,
	SPELL_DESINTEGRATE            = 0x4E,
	SPELL_CONJURE_BOLT            = 0x4F,
	SPELL_BERSERK                 = 0x50,
	SPELL_LEVITATE                = 0x51,
	SPELL_MASS_HEALING            = 0x52,
	SPELL_ANIMATE_DEAD            = 0x53,
	SPELL_HEAL_FRIEND             = 0x54,
	SPELL_UNDEAD_LEGION           = 0x55,
	SPELL_MAGIC_WALL              = 0x56,
	SPELL_DEATH_STRIKE            = 0x57,
	SPELL_ENERGY_STRIKE           = 0x58,
	SPELL_FLAME_STRIKE            = 0x59,
	SPELL_CANCEL_INVISIBILITY     = 0x5A,
	SPELL_POISONBOMB              = 0x5B,
	SPELL_ENCHANT_STAFF           = 0x5C,
	SPELL_CHALLENGE               = 0x5D,
	SPELL_WILD_GROWTH             = 0x5E,
	SPELL_POWER_BOLT              = 0x5F,
	SPELL_UNKNOWN_18              = 0x60,
	SPELL_UNKNOWN_19              = 0x61,
	SPELL_UNKNOWN_20              = 0x62,
	SPELL_UNKNOWN_21              = 0x63,
	SPELL_UNKNOWN_22              = 0x64,
	SPELL_UNKNOWN_23              = 0x65,
	SPELL_UNKNOWN_24              = 0x66,
	SPELL_UNKNOWN_25              = 0x67,
	SPELL_UNKNOWN_26              = 0x68,
	SPELL_FIERCE_BERSERK          = 0x69,
	SPELL_GROUNDSHAKER            = 0x6A,
	SPELL_WHIRLWIND_THROW         = 0x6B,
	SPELL_SNIPER_ARROW            = 0x6C,
	SPELL_PIERCING_BOLT           = 0x6D,
	SPELL_ENCHANT_SPEAR           = 0x6E,
	SPELL_ETHEREAL_SPEAR          = 0x6F,
	SPELL_ICE_STRIKE              = 0x70,
	SPELL_TERRA_STRIKE            = 0x71,
	SPELL_ICICLE                  = 0x72,
	SPELL_AVALANCHE               = 0x73,
	SPELL_STONE_SHOWER            = 0x74,
	SPELL_THUNDERSTORM            = 0x75,
	SPELL_ETERNAL_WINTER          = 0x76,
	SPELL_RAGE_OF_THE_SKIES       = 0x77,
	SPELL_TERRA_WAVE              = 0x78,
	SPELL_ICE_WAVE                = 0x79,
	SPELL_DIVINE_MISSILE          = 0x7A,
	SPELL_WOUND_CLEANSING         = 0x7B,
	SPELL_DIVINE_CALDERA          = 0x7C,
	SPELL_DIVINE_HEALING          = 0x7D,
	SPELL_TRAIN_PARTY             = 0x7E,
	SPELL_PROTECT_PARTY           = 0x7F,
	SPELL_HEAL_PARTY              = 0x80,
	SPELL_ENCHANT_PARTY           = 0x81,
	SPELL_HOLY_MISSILE            = 0x82,
	SPELL_CHARGE                  = 0x83,
	SPELL_PROTECTOR               = 0x84,
	SPELL_BLOOD_RAGE              = 0x85,
	SPELL_SWIFT_FOOT              = 0x86,
	SPELL_SHARPSHOOTER            = 0x87,
	SPELL_UNKNOWN_27              = 0x88,
	SPELL_UNKNOWN_28              = 0x89,
	SPELL_IGNITE                  = 0x8A,
	SPELL_CURSE                   = 0x8B,
	SPELL_ELECTRIFY               = 0x8C,
	SPELL_INFLICT_WOUND           = 0x8D,
	SPELL_ENVENOM                 = 0x8E,
	SPELL_HOLY_FLASH              = 0x8F,
	SPELL_CURE_BLEEDING           = 0x90,
	SPELL_CURE_BURNING            = 0x91,
	SPELL_CURE_ELECTRIFICATION    = 0x92,
	SPELL_CURE_CURSE              = 0x93,
	SPELL_PHYSICAL_STRIKE         = 0x94,
	SPELL_LIGHTNING               = 0x95,
	SPELL_STRONG_FLAME_STRIKE     = 0x96,
	SPELL_STRONG_ENERGY_STRIKE    = 0x97,
	SPELL_STRONG_ICE_STRIKE       = 0x98,
	SPELL_STRONG_TERRA_STRIKE     = 0x99,
	SPELL_ULTIMATE_FLAME_STRIKE   = 0x9A,
	SPELL_ULTIMATE_ENERGY_STRIKE  = 0x9B,
	SPELL_ULTIMATE_ICE_STRIKE     = 0x9C,
	SPELL_ULTIMATE_TERRA_STRIKE   = 0x9D,
	SPELL_INTENSE_WOUND_CLEANSING = 0x9E,
	SPELL_RECOVERY                = 0x9F,
	SPELL_INTENSE_RECOVERY        = 0xA0
};

enum SpeakClasses : uint8_t {
	TALKTYPE_SAY = 1, //normal talk
	TALKTYPE_WHISPER = 2, //whispering - #w text
	TALKTYPE_YELL = 3, //yelling - #y text
	TALKTYPE_PRIVATE_PN = 4, //Player-to-NPC speaking(NPCs channel)
	TALKTYPE_PRIVATE_NP = 5, //NPC-to-Player speaking
	TALKTYPE_PRIVATE = 6, //Players speaking privately to players
	TALKTYPE_CHANNEL_Y = 7, //Yellow message in chat
	TALKTYPE_CHANNEL_W = 8, //White message in chat
	TALKTYPE_BROADCAST = 9, //Broadcast a message - #b
	TALKTYPE_CHANNEL_R1 = 10, //Talk red on chat - #c text
	TALKTYPE_PRIVATE_RED = 11, //Red private - @name@text
	TALKTYPE_CHANNEL_O = 12, //Talk orange on text - @name@text
	TALKTYPE_MONSTER_SAY = 13, // Talk orange
	TALKTYPE_MONSTER_YELL = 14, // Yell orange
	// removed from game
	TALKTYPE_RVR_CHANNEL = 254, //Reporting rule violation - Ctrl+R
	TALKTYPE_RVR_ANSWER = 253, //Answering report
	TALKTYPE_RVR_CONTINUE = 252, //Answering the answer of the report
	TALKTYPE_CHANNEL_R2 = 251, //Talk red anonymously on chat - #d
};

enum MessageClasses : uint8_t {
	MESSAGE_CLASS_FIRST = 13,
	MESSAGE_EVENT_ORANGE = MESSAGE_CLASS_FIRST, /*Orange message in the console*/
	MESSAGE_STATUS_CONSOLE_ORANGE = 14,  /*Orange message in the console*/
	MESSAGE_STATUS_WARNING = 15, /*Red message in game window and in the console*/
	MESSAGE_EVENT_ADVANCE = 16, /*White message in game window and in the console*/
	MESSAGE_EVENT_DEFAULT = 17, /*White message at the bottom of the game window and in the console*/
	MESSAGE_STATUS_DEFAULT = 18, /*White message at the bottom of the game window and in the console*/
	MESSAGE_INFO_DESCR = 19, /*Green message in game window and in the console*/
	MESSAGE_STATUS_SMALL = 20, /*White message at the bottom of the game window"*/
	MESSAGE_STATUS_CONSOLE_BLUE = 21, /*FIXME Blue message in the console*/
	MESSAGE_STATUS_CONSOLE_RED = 22, /*Red message in the console*/
};

enum FluidColors_t : uint8_t {
	FLUID_EMPTY,
	FLUID_BLUE,
	FLUID_RED,
	FLUID_BROWN,
	FLUID_GREEN,
	FLUID_YELLOW,
	FLUID_WHITE,
	FLUID_PURPLE,
};

enum FluidTypes_t : uint8_t {
	FLUID_NONE = FLUID_EMPTY,
	FLUID_WATER = FLUID_BLUE,
	FLUID_LIFE = FLUID_RED,
	FLUID_BEER = FLUID_BROWN,
	FLUID_SLIME = FLUID_GREEN,
	FLUID_LEMONADE = FLUID_YELLOW,
	FLUID_MILK = FLUID_WHITE,
	FLUID_MANA = FLUID_PURPLE,

	FLUID_BLOOD = FLUID_RED + 8,
	FLUID_OIL = FLUID_BROWN + 8,
	FLUID_URINE = FLUID_YELLOW + 8,
	FLUID_COCONUTMILK = FLUID_WHITE + 8,
	FLUID_WINE = FLUID_PURPLE + 8,

	FLUID_MUD = FLUID_BROWN + 16,
	FLUID_FRUITJUICE = FLUID_YELLOW + 16,

	FLUID_LAVA = FLUID_RED + 24,
	FLUID_RUM = FLUID_BROWN + 24,
	FLUID_SWAMP = FLUID_GREEN + 24,

	FLUID_TEA = FLUID_BROWN + 32,

	FLUID_MEAD = FLUID_BROWN + 40,
};

const uint8_t reverseFluidMap[] = {
	FLUID_EMPTY,
	FLUID_WATER,
	FLUID_MANA,
	FLUID_BEER,
	FLUID_EMPTY,
	FLUID_LIFE,
	FLUID_SLIME,
	FLUID_EMPTY,
	FLUID_LEMONADE,
	FLUID_MILK,
};

const uint8_t clientToServerFluidMap[] = {
	FLUID_EMPTY,
	FLUID_WATER,
	FLUID_MANA,
	FLUID_BEER,
	FLUID_MUD,
	FLUID_LIFE,
	FLUID_SLIME,
	FLUID_RUM,
	FLUID_LEMONADE,
	FLUID_MILK,
	FLUID_WINE,
	FLUID_BLOOD,
	FLUID_URINE,
	FLUID_OIL,
	FLUID_FRUITJUICE,
	FLUID_COCONUTMILK,
	FLUID_TEA,
	FLUID_MEAD,
};

enum ClientFluidTypes_t : uint8_t {
	CLIENTFLUID_EMPTY = 0,
	CLIENTFLUID_BLUE = 1,
	CLIENTFLUID_PURPLE = 2,
	CLIENTFLUID_BROWN_1 = 3,
	CLIENTFLUID_BROWN_2 = 4,
	CLIENTFLUID_RED = 5,
	CLIENTFLUID_GREEN = 6,
	CLIENTFLUID_BROWN = 7,
	CLIENTFLUID_YELLOW = 8,
	CLIENTFLUID_WHITE = 9,
};

const uint8_t fluidMap[] = {
	CLIENTFLUID_EMPTY,
	CLIENTFLUID_BLUE,
	CLIENTFLUID_RED,
	CLIENTFLUID_BROWN_1,
	CLIENTFLUID_GREEN,
	CLIENTFLUID_YELLOW,
	CLIENTFLUID_WHITE,
	CLIENTFLUID_PURPLE,
};

enum SquareColor_t : uint8_t {
	SQ_COLOR_BLACK = 0,
};

enum TextColor_t : uint8_t {
	TEXTCOLOR_BLACK = 0,
	TEXTCOLOR_BLUE = 5,
	TEXTCOLOR_GREEN = 18,
	TEXTCOLOR_LIGHTGREEN = 66,
	TEXTCOLOR_DARKBROWN = 78,
	TEXTCOLOR_LIGHTBLUE = 89,
	TEXTCOLOR_MAYABLUE = 95,
	TEXTCOLOR_DARKRED = 108,
	TEXTCOLOR_DARKPURPLE = 112,
	TEXTCOLOR_BROWN = 120,
	TEXTCOLOR_GREY = 129,
	TEXTCOLOR_TEAL = 143,
	TEXTCOLOR_DARKPINK = 152,
	TEXTCOLOR_PURPLE = 154,
	TEXTCOLOR_DARKORANGE = 156,
	TEXTCOLOR_RED = 180,
	TEXTCOLOR_PINK = 190,
	TEXTCOLOR_ORANGE = 192,
	TEXTCOLOR_DARKYELLOW = 205,
	TEXTCOLOR_YELLOW = 210,
	TEXTCOLOR_WHITE = 215,
	TEXTCOLOR_NONE = 255,
};

enum Icons_t {
	ICON_NONE = 0 << 0,
	ICON_POISON = 1 << 0,
	ICON_BURN = 1 << 1,
	ICON_ENERGY =  1 << 2,
	ICON_DRUNK = 1 << 3,
	ICON_MANASHIELD = 1 << 4,
	ICON_PARALYZE = 1 << 5,
	ICON_HASTE = 1 << 6,
	ICON_SWORDS = 1 << 7,
	ICON_DROWNING = 1 << 8,
	ICON_FREEZING = 1 << 9,
	ICON_DAZZLED = 1 << 10,
	ICON_CURSED = 1 << 11,
	ICON_PARTY_BUFF = 1 << 12,
	ICON_REDSWORDS = 1 << 13,
	ICON_PIGEON = 1 << 14,
	ICON_BLEEDING = 1 << 15,
};

enum WeaponType_t : uint8_t {
	WEAPON_NONE,
	WEAPON_SWORD,
	WEAPON_CLUB,
	WEAPON_AXE,
	WEAPON_SHIELD,
	WEAPON_DISTANCE,
	WEAPON_WAND,
	WEAPON_AMMO,
};

enum Ammo_t : uint8_t {
	AMMO_NONE,
	AMMO_BOLT,
	AMMO_ARROW,
	AMMO_SPEAR,
	AMMO_THROWINGSTAR,
	AMMO_THROWINGKNIFE,
	AMMO_STONE,
	AMMO_SNOWBALL,
};

enum WeaponAction_t : uint8_t {
	WEAPONACTION_NONE,
	WEAPONACTION_REMOVECOUNT,
	WEAPONACTION_REMOVECHARGE,
	WEAPONACTION_MOVE,
};

enum WieldInfo_t {
	WIELDINFO_NONE = 0 << 0,
	WIELDINFO_LEVEL = 1 << 0,
	WIELDINFO_MAGLV = 1 << 1,
	WIELDINFO_VOCREQ = 1 << 2,
	WIELDINFO_PREMIUM = 1 << 3,
};

enum Skulls_t : uint8_t {
	SKULL_NONE = 0,
	SKULL_YELLOW = 1,
	SKULL_GREEN = 2,
	SKULL_WHITE = 3,
	SKULL_RED = 4,
	SKULL_BLACK = 5,
	SKULL_ORANGE = 6
};

enum PartyShields_t : uint8_t {
	SHIELD_NONE = 0,
	SHIELD_WHITEYELLOW = 1,
	SHIELD_WHITEBLUE = 2,
	SHIELD_BLUE = 3,
	SHIELD_YELLOW = 4,
	SHIELD_BLUE_SHAREDEXP = 5,
	SHIELD_YELLOW_SHAREDEXP = 6,
	SHIELD_BLUE_NOSHAREDEXP_BLINK = 7,
	SHIELD_YELLOW_NOSHAREDEXP_BLINK = 8,
	SHIELD_BLUE_NOSHAREDEXP = 9,
	SHIELD_YELLOW_NOSHAREDEXP = 10,
};

enum GuildEmblems_t : uint8_t {
	GUILDEMBLEM_NONE = 0,
	GUILDEMBLEM_ALLY = 1,
	GUILDEMBLEM_ENEMY = 2,
	GUILDEMBLEM_NEUTRAL = 3
};

enum item_t : uint16_t {
	ITEM_FIREFIELD_PVP_FULL = 1487,
	ITEM_FIREFIELD_PVP_MEDIUM = 1488,
	ITEM_FIREFIELD_PVP_SMALL = 1489,
	ITEM_FIREFIELD_PERSISTENT_FULL = 1492,
	ITEM_FIREFIELD_PERSISTENT_MEDIUM = 1493,
	ITEM_FIREFIELD_PERSISTENT_SMALL = 1494,
	ITEM_FIREFIELD_NOPVP = 1500,

	ITEM_POISONFIELD_PVP = 1490,
	ITEM_POISONFIELD_PERSISTENT = 1496,
	ITEM_POISONFIELD_NOPVP = 1503,

	ITEM_ENERGYFIELD_PVP = 1491,
	ITEM_ENERGYFIELD_PERSISTENT = 1495,
	ITEM_ENERGYFIELD_NOPVP = 1504,

	ITEM_MAGICWALL = 1497,
	ITEM_MAGICWALL_PERSISTENT = 1498,
	ITEM_MAGICWALL_SAFE = 11098,
	ITEM_MAGICWALL_NOPVP = 20669,

	ITEM_WILDGROWTH = 1499,
	ITEM_WILDGROWTH_PERSISTENT = 2721,
	ITEM_WILDGROWTH_SAFE = 11099,
	ITEM_WILDGROWTH_NOPVP = 20670,

	ITEM_BAG = 1987,
	ITEM_BACKPACK = 1988,

	ITEM_GOLD_COIN = 2148,
	ITEM_PLATINUM_COIN = 2152,
	ITEM_CRYSTAL_COIN = 2160,

	ITEM_DEPOT = 2594,
	ITEM_LOCKER = 2589,

	ITEM_MALE_CORPSE = 3058,
	ITEM_FEMALE_CORPSE = 3065,

	ITEM_FULLSPLASH = 2016,
	ITEM_SMALLSPLASH = 2019,

	ITEM_PARCEL = 2595,
	ITEM_LETTER = 2597,
	ITEM_LETTER_STAMPED = 2598,
	ITEM_LABEL = 2599,

	ITEM_AMULETOFLOSS = 2173,

	ITEM_DOCUMENT_RO = 1968, //read-only
};

enum PlayerFlags : uint64_t {
	PlayerFlag_CannotUseCombat = 1 << 0,
	PlayerFlag_CannotAttackPlayer = 1 << 1,
	PlayerFlag_CannotAttackMonster = 1 << 2,
	PlayerFlag_CannotBeAttacked = 1 << 3,
	PlayerFlag_CanConvinceAll = 1 << 4,
	PlayerFlag_CanSummonAll = 1 << 5,
	PlayerFlag_CanIllusionAll = 1 << 6,
	PlayerFlag_CanSenseInvisibility = 1 << 7,
	PlayerFlag_IgnoredByMonsters = 1 << 8,
	PlayerFlag_NotGainInFight = 1 << 9,
	PlayerFlag_HasInfiniteMana = 1 << 10,
	PlayerFlag_HasInfiniteSoul = 1 << 11,
	PlayerFlag_HasNoExhaustion = 1 << 12,
	PlayerFlag_CannotUseSpells = 1 << 13,
	PlayerFlag_CannotPickupItem = 1 << 14,
	PlayerFlag_CanAlwaysLogin = 1 << 15,
	PlayerFlag_CanBroadcast = 1 << 16,
	PlayerFlag_CanEditHouses = 1 << 17,
	PlayerFlag_CannotBeBanned = 1 << 18,
	PlayerFlag_CannotBePushed = 1 << 19,
	PlayerFlag_HasInfiniteCapacity = 1 << 20,
	PlayerFlag_CanPushAllCreatures = 1 << 21,
	PlayerFlag_CanTalkRedPrivate = 1 << 22,
	PlayerFlag_CanTalkRedChannel = 1 << 23,
	PlayerFlag_TalkOrangeHelpChannel = 1 << 24,
	PlayerFlag_NotGainExperience = 1 << 25,
	PlayerFlag_NotGainMana = 1 << 26,
	PlayerFlag_NotGainHealth = 1 << 27,
	PlayerFlag_NotGainSkill = 1 << 28,
	PlayerFlag_SetMaxSpeed = 1 << 29,
	PlayerFlag_SpecialVIP = 1 << 30,
	PlayerFlag_NotGenerateLoot = static_cast<uint64_t>(1) << 31,
	PlayerFlag_CanTalkRedChannelAnonymous = static_cast<uint64_t>(1) << 32,
	PlayerFlag_IgnoreProtectionZone = static_cast<uint64_t>(1) << 33,
	PlayerFlag_IgnoreSpellCheck = static_cast<uint64_t>(1) << 34,
	PlayerFlag_IgnoreWeaponCheck = static_cast<uint64_t>(1) << 35,
	PlayerFlag_CannotBeMuted = static_cast<uint64_t>(1) << 36,
	PlayerFlag_IsAlwaysPremium = static_cast<uint64_t>(1) << 37,
	PlayerFlag_CanTurnHop = static_cast<uint64_t>(1) << 38,
	PlayerFlag_CanMoveAnything = static_cast<uint64_t>(1) << 39
};

enum ReloadTypes_t : uint8_t  {
	RELOAD_TYPE_ALL,
	RELOAD_TYPE_ACTIONS,
	RELOAD_TYPE_CHAT,
	RELOAD_TYPE_CONFIG,
	RELOAD_TYPE_CREATURESCRIPTS,
	RELOAD_TYPE_EVENTS,
	RELOAD_TYPE_GLOBAL,
	RELOAD_TYPE_GLOBALEVENTS,
	RELOAD_TYPE_ITEMS,
	RELOAD_TYPE_MONSTERS,
	RELOAD_TYPE_MOUNTS,
	RELOAD_TYPE_MOVEMENTS,
	RELOAD_TYPE_NPCS,
	RELOAD_TYPE_QUESTS,
	RELOAD_TYPE_RAIDS,
	RELOAD_TYPE_SCRIPTS,
	RELOAD_TYPE_SPELLS,
	RELOAD_TYPE_TALKACTIONS,
	RELOAD_TYPE_WEAPONS,
	RELOAD_TYPE_OUTFITS
};

static constexpr int32_t CHANNEL_GUILD = 0x00;
static constexpr int32_t CHANNEL_PARTY = 0x01;
static constexpr int32_t CHANNEL_PRIVATE = 0xFFFF;

//Reserved player storage key ranges;
//[10000000 - 20000000];
static constexpr int32_t PSTRG_RESERVED_RANGE_START = 10000000;
static constexpr int32_t PSTRG_RESERVED_RANGE_SIZE = 10000000;
//[1000 - 1500];
static constexpr int32_t PSTRG_OUTFITS_RANGE_START = (PSTRG_RESERVED_RANGE_START + 1000);
static constexpr int32_t PSTRG_OUTFITS_RANGE_SIZE = 500;
//[2000 - 2500]
// static constexpr int32_t PSTRG_MOUNTS_RANGE_START = (PSTRG_RESERVED_RANGE_START + 2000);
// static constexpr int32_t PSTRG_MOUNTS_RANGE_SIZE = 10;
static constexpr int32_t PSTRG_MOUNTS_RANGE_START = (PSTRG_RESERVED_RANGE_START + 2000);
static constexpr int32_t PSTRG_MOUNTS_RANGE_SIZE = 501;
static constexpr int32_t PSTRG_MOUNTS_CURRENTMOUNT = (PSTRG_MOUNTS_RANGE_START + PSTRG_MOUNTS_RANGE_SIZE);


#define IS_IN_KEYRANGE(key, range) (key >= PSTRG_##range##_START && ((key - PSTRG_##range##_START) <= PSTRG_##range##_SIZE))

#endif
